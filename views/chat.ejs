<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Chat</title>
    <link rel="stylesheet" href="styles.css">
    <script defer src="script.js"></script>
    <script src="/socket.io/socket.io.js"></script>
</head>
<body>

<div class="container">
    <div class="sidebar">
        <h3 id="welcomeMessage">Welcome, <%= user ? user.name : 'Guest' %>!</h3>
        <h2>Chats</h2>
        <div class="search-box">
            <input type="text" id="search" placeholder="Search users or groups...">
        </div>
        
        <h3>Users</h3>
        <ul class="user-list" id="userList">
            <% users.forEach(user => { %>
                <li onclick="startChat('<%= user._id %>', '<%= user.name %>', false)">
                    <%= user.name %>
                </li>
            <% }) %>
        </ul>

        <h3>Groups</h3>
        <ul class="group-list" id="groupList">
            <% groups.forEach(group => { %>
                <li onclick="startChat('<%= group._id %>', '<%= group.name %>', true)">
                    <%= group.name %>
                </li>
            <% }) %>
        </ul>

        <button onclick="showCreateGroup()">+ Create Group</button>
        <div id="createGroupDiv" style="display: none;">
            <input type="text" id="groupName" placeholder="Group Name">
            <button onclick="createGroup()">Create</button>
        </div>

        <div class="logout-btn-container">
            <button class="logout-btn" onclick="logout()">Logout</button>
        </div>
    </div>

    <div class="chat-container">
        <div class="chat-header" id="chat-header">Select a chat</div>
        <div class="messages" id="messages"></div>
        <form class="chat-input" onsubmit="sendMessage(event)">
            <input type="text" id="messageInput" placeholder="Type a message..." required>
            <button type="submit">Send</button>
        </form>
    </div>
</div>

<script>
const socket = io();
let currentChatId = null;
let isGroupChat = false;
let userId = "<%- user ? user._id : '' %>"; 

console.log("User ID:", userId);

document.getElementById("search").addEventListener("keyup", filterChats);

function startChat(chatId, chatName, group) {
    if (!chatId) return alert("Chat not found! Please select a valid chat.");

    console.log(`Joining chat: ${chatName} (Chat ID: ${chatId})`);
    currentChatId = chatId;
    isGroupChat = group;
    document.getElementById("chat-header").innerText = chatName;
    
    socket.emit("joinChat", { chatId, userId });
    loadMessages(chatId);
}



async function startChat(otherUserId, chatName, group) {
    if (!otherUserId) {
        alert("Chat not found! Please select a valid chat.");
        return;
    }

    console.log(`Starting chat with: ${chatName} (Other User ID: ${otherUserId})`);
    
    // ✅ Set global variables
    currentChatId = null;  // We'll get the correct chatId from the server
    isGroupChat = group;

    document.getElementById("chat-header").innerText = chatName;

    try {
        // ✅ Tell the server to find or create a chat
        socket.emit("joinChat", { userId, otherUserId });

        // ✅ Wait for the server to send the correct chat ID
        socket.on("chatJoined", async ({ chatId }) => {
            console.log(`✅ Joined chat: ${chatId}`);
            currentChatId = chatId;

            // ✅ Fetch messages for the chat
            const response = await fetch(`/${group ? 'group' : 'chat'}/${chatId}/messages`);
            if (!response.ok) throw new Error("Chat not found!");

            const messages = await response.json();
            document.getElementById("messages").innerHTML = ""; 

            messages.forEach(msg => appendMessage(msg.content, msg.sender._id === userId ? "sent" : "received"));
        });
    } catch (error) {
        console.error("❌ Error loading chat:", error);
    }
}



async function loadMessages(chatId) {
    try {
        const response = await fetch(`/${isGroupChat ? 'group' : 'chat'}/${chatId}/messages`);
        if (!response.ok) throw new Error("Chat not found!");

        const messages = await response.json();
        const messageContainer = document.getElementById("messages");
        messageContainer.innerHTML = "";
        
        messages.forEach(msg => appendMessage(msg.content, msg.sender._id === userId ? "sent" : "received"));
    } catch (error) {
        console.error("Error loading messages:", error);
    }
}

async function sendMessage(event) {
    event.preventDefault();
    const message = document.getElementById("messageInput").value.trim();

    if (!message) return;
    if (!currentChatId) {
        alert("Select a chat first.");
        return;
    }

    try {
        const response = await fetch(`/chat/message`, {
            method: "POST",
            headers: { "Content-Type": "application/json" },
            body: JSON.stringify({
                chatId: currentChatId,
                senderId: userId,
                content: message
            })
        });

        const data = await response.json();
        if (!data._id) throw new Error("Message sending failed!");

        appendMessage(message, "sent");
        document.getElementById("messageInput").value = "";

        // ✅ Emit message through WebSocket
        socket.emit("sendMessage", {
            chatId: currentChatId,
            senderId: userId,
            content: message
        });
    } catch (error) {
        console.error("❌ Error sending message:", error);
        alert("Failed to send message.");
    }
}

function appendMessage(content, type) {
    const messageElement = document.createElement("div");
    messageElement.classList.add("message", type);
    messageElement.innerText = content;
    document.getElementById("messages").appendChild(messageElement);
}

socket.on("receiveMessage", (data) => {
    console.log("🔹 New message received:", data);
    if (data.chatId === currentChatId) appendMessage(data.content, data.sender._id === userId ? "sent" : "received");
});

function logout() {
    fetch('/logout', { method: 'GET' })
        .then(() => window.location.href = "/login")
        .catch(err => console.error("Logout failed:", err));
}

function filterChats() {
    const searchQuery = document.getElementById("search").value.toLowerCase();
    document.querySelectorAll(".user-list li, .group-list li").forEach(item => {
        item.style.display = item.innerText.toLowerCase().includes(searchQuery) ? "block" : "none";
    });
}
</script>
</body>
</html>

<style>
body {
    font-family: 'Roboto', sans-serif;
    display: flex;
    height: 100vh;
    margin: 0;
    background: #f4f6f9;
}

.container {
    display: flex;
    width: 100%;
    height: 100%;
}

.sidebar {
    width: 300px;
    background-color: #2c3e50;
    color: white;
    padding: 20px;
    display: flex;
    flex-direction: column;
}

.search-box input {
    width: 90%;
    padding: 12px;
    border-radius: 25px;
    border: 2px solid #34495e;
    background-color: #34495e;
    color: white;
    font-size: 16px;
}

.search-box input:focus {
    outline: none;
    border-color: #2ecc71;
}

.user-list, .group-list {
    list-style-type: none;
    padding: 0;
    flex-grow: 1;
    overflow-y: auto;
}

.user-list li, .group-list li {
    padding: 12px;
    cursor: pointer;
    border-bottom: 1px solid #34495e;
    transition: background-color 0.3s ease;
}

.user-list li:hover, .group-list li:hover {
    background-color: #34495e;
    transform: translateX(5px);
}

.chat-container {
    flex-grow: 1;
    display: flex;
    flex-direction: column;
    background-color: white;
    border-left: 2px solid #ddd;
}

.chat-header {
    background-color: #3498db;
    color: white;
    padding: 20px;
    text-align: center;
}

.messages {
    flex-grow: 1;
    padding: 20px;
    overflow-y: auto;
    background-color: #ecf0f1;
    display: flex;
    flex-direction: column;
    gap: 10px;
}

.message {
    padding: 12px;
    border-radius: 10px;
    max-width: 70%;
    box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
}

.sent {
    background-color: #3498db;
    color: white;
    align-self: flex-end;
}

.received {
    background-color: #e74c3c;
    color: white;
    align-self: flex-start;
}

.chat-input {
    display: flex;
    padding: 15px;
    background-color: white;
    border-top: 1px solid #ddd;
}

.chat-input input {
    flex-grow: 1;
    padding: 12px;
    border-radius: 30px;
    font-size: 16px;
}

.chat-input button {
    padding: 12px 20px;
    background-color: #2ecc71;
    color: white;
    border-radius: 30px;
    margin-left: 10px;
    font-size: 16px;
}

.logout-btn {
    width: 90%;
    padding: 15px;
    margin-top: 20px;
    background-color: #e74c3c;
    color: white;
    border-radius: 30px;
    font-size: 16px;
    text-align: center;
}

.logout-btn:hover {
    background-color: #c0392b;
}

</style>