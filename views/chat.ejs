<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Welcome, <%= currentUser.name %>!</title>
    <script src="/socket.io/socket.io.js"></script>

</head>

<body>

    <h2>Welcome, <%= currentUser.name %>!</h2>

    <div id="container">
        <div id="users">
            <h3>Users</h3>
            <% users.forEach(user=> { %>
                <% if (user._id.toString() !==currentUser._id.toString()) { %>
                    <div class="user" onclick="openChat('<%= user._id %>', '<%= user.name %>')">
                        <%= user.name %> <span class="status-indicator" id="status-<%= user._id %>"></span>
                    </div>
                    <% } %>
                        <% }); %>
                            <!--  join a group -->
                            <h3>Create or Join Group</h3>
                            <input type="text" id="groupName" placeholder="Group name">
                            <button onclick="createGroup()">Create Group</button>
                            <div id="groupList"></div>

                            <a href="/logout" id="logoutBtn">Logout</a>

        </div>
        
          
       

        <div id="chat">
            <h3 id="chatTitle">Select a user or group to chat</h3>
            <ul id="messages"></ul>
            <input id="messageInput" placeholder="Type a message..." />
            <button id="sendMessage" disabled>Send</button>
        </div>
    </div>

    <script>
        const socket = io();
        let currentRoom = null;
        let currentChatUser = null;


        function openChat(userId, userName) {
            const user1 = "<%= currentUser._id %>";
            const user2 = userId;
            currentRoom = user1 < user2 ? `${user1}_${user2}` : `${user2}_${user1}`;
            currentChatUser = userName;

            document.getElementById("chatTitle").innerText = "Chat with " + userName;
            document.getElementById("sendMessage").disabled = false;
            document.getElementById("messages").innerHTML = "";

            console.log(` Joining chat room: ${currentRoom}`);
            socket.emit("joinRoom", currentRoom);
        }


        socket.on("updateOnlineUsers", (onlineUsers) => {
    document.querySelectorAll(".status-indicator").forEach((el) => {
        el.innerText = " (Offline)";
        el.style.color = "red";
    });

    onlineUsers.forEach(userId => {
        const userStatus = document.getElementById(`status-${userId}`);
        if (userStatus) {
            userStatus.innerText = " (Online)";
            userStatus.style.color = "green";
        }
    });
});


        function createGroup() {
            const groupName = document.getElementById("groupName").value.trim();
            if (groupName === "") return;


            socket.emit("createGroup", groupName);
            currentRoom = groupName;
            document.getElementById("chatTitle").innerText = `Group Chat: ${groupName}`;
            document.getElementById("sendMessage").disabled = false;
            document.getElementById("messages").innerHTML = "";

            console.log(` Creating/joining group: ${groupName}`);
            socket.emit("joinRoom", currentRoom);
        }

        document.getElementById("sendMessage").addEventListener("click", sendMessage);
        document.getElementById("messageInput").addEventListener("keypress", (event) => {
            if (event.key === "Enter") sendMessage();
        });

        function sendMessage() {
            const messageInput = document.getElementById("messageInput");
            const message = messageInput.value.trim();
            if (message === "" || !currentRoom) return;

            const messageData = {
                room: currentRoom,
                message,
                sender: "<%= currentUser._id %>"
            };

            console.log(" Sending message:", messageData);

            socket.emit("chatMessage", messageData);
            addMessage("<%= currentUser.name %>", message, "sent");
            messageInput.value = "";
        }


        socket.on("loadMessages", (messages) => {
    const messagesList = document.getElementById("messages");
    messagesList.innerHTML = "";

    messages.forEach(msg => {
        const senderName = msg.sender && msg.sender.name ? msg.sender.name : "Unknown";

        const li = document.createElement("li");
        li.innerHTML = `<strong>${senderName}</strong>: ${msg.message}`;
        messagesList.appendChild(li);
    });

    messagesList.scrollTop = messagesList.scrollHeight;
});


socket.on("chatMessage", (data) => {
    console.log("Received message:", data);

    if (data.room !== currentRoom) return;

    const senderName = data.sender?.name || "Unknown";  
    addMessage(senderName, data.message, data.sender?._id === "<%= currentUser._id %>" ? "sent" : "received");
});


        function addMessage(sender, message, type) {
            const msgList = document.getElementById("messages");
            const newMsg = document.createElement("li");
            newMsg.className = `message ${type}`;
            newMsg.textContent = `${sender}: ${message}`;
            msgList.appendChild(newMsg);
            msgList.scrollTop = msgList.scrollHeight;
        }


        socket.on("groupList", (groups) => {
            const groupList = document.getElementById("groupList");
            groupList.innerHTML = "";
            groups.forEach(group => {
                const groupItem = document.createElement("div");
                groupItem.className = "user";
                groupItem.textContent = group;
                groupItem.onclick = () => openChat(group, group);
                groupList.appendChild(groupItem);
            });
        });


        socket.emit("requestGroupList");



        document.getElementById("logoutBtn").addEventListener("click", function (event) {
    event.preventDefault(); 

    fetch("/logout", {
        method: "POST",
        credentials: "include"
    })
    .then(response => response.json())
    .then(data => {
        console.log(data.message); 
        window.location.href = "/login"; 
    })
    .catch(error => console.error("Logout failed:", error));
});


    </script>

</body>

</html>


<style>
    h2 {
        text-align: center;
    }

    #container {
        display: flex;
        max-width: 900px;
        margin: auto;
    }

    #users {
        width: 30%;
        border-right: 1px solid #ccc;
        padding: 10px;
    }

    #chat {
        width: 70%;
        padding: 10px;
    }

    .user {
        cursor: pointer;
        padding: 8px;
        margin-bottom: 5px;
        background: #f0f0f0;
        border-radius: 5px;
    }

    .user:hover {
        background: #ddd;
    }

    #messages {
        list-style: none;
        padding: 0;
        max-height: 300px;
        overflow-y: auto;
    }

    .message {
        padding: 8px;
        margin: 5px 0;
        border-radius: 5px;
    }

    .sent {
        background: #dcf8c6;
        text-align: right;
    }

    .received {
        background: #f1f0f0;
        text-align: left;
    }

    #messageInput {
        width: 80%;
        padding: 10px;
    }

    #sendMessage {
        padding: 10px;
    }

    #logoutBtn {
        display: block;
        margin: 20px auto;
        padding: 10px 15px;
        background: red;
        color: white;
        text-align: center;
        cursor: pointer;
        border-radius: 5px;
        width: fit-content;
    }

    #logoutBtn:hover {
        background: darkred;
    }

    body {
        font-family: Arial, sans-serif;
        background-color: #f4f7fa;
        margin: 0;
        padding: 0;
    }

    h2 {
        text-align: center;
        color: #333;
        margin-top: 20px;
    }

    #container {
        display: flex;
        max-width: 1200px;
        margin: 30px auto;
        padding: 0 20px;
    }

    #users {
        width: 30%;
        border-right: 1px solid #ccc;
        padding: 15px;
        background-color: #fff;
    }

    #chat {
        width: 70%;
        padding: 15px;
        background-color: #fff;
        box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
        border-radius: 8px;
    }

    .user {
        cursor: pointer;
        padding: 10px;
        margin-bottom: 8px;
        background: #f0f0f0;
        border-radius: 5px;
        font-size: 16px;

    }

    .user:hover {
        background: #d9d9d9;
    }

    #messages {
        list-style: none;
        padding: 0;
        max-height: 400px;
        overflow-y: auto;
        margin-bottom: 20px;
    }

    .message {
        padding: 10px;
        margin: 8px 0;
        border-radius: 6px;
        font-size: 14px;
        line-height: 1.5;
        word-wrap: break-word;
    }

    .sent {
        background: #dcf8c6;
        text-align: right;
    }

    .received {
        background: #f1f0f0;
        text-align: left;
    }

    #messageInput {
        width: 80%;
        padding: 12px;
        font-size: 16px;
        border: 1px solid #ccc;
        border-radius: 5px;
        margin-right: 10px;
        outline: none;
        transition: border 0.3s ease;
    }

    #messageInput:focus {
        border-color: #6c63ff;
    }

    #sendMessage {
        padding: 12px 20px;
        background-color: #6c63ff;
        color: white;
        border: none;
        border-radius: 5px;
        cursor: pointer;
        font-size: 16px;
        transition: background-color 0.3s ease;
    }

    #sendMessage:hover {
        background-color: #5753e3;
    }

    #logoutBtn {
        display: block;
        margin: 20px auto;
        padding: 10px 20px;
        background-color: red;
        color: white;
        text-align: center;
        border-radius: 5px;
        width: fit-content;
        font-size: 16px;
        transition: background-color 0.3s ease;
    }

    #logoutBtn:hover {
        background-color: darkred;
    }

    #chatTitle {
        font-size: 18px;
        margin-bottom: 10px;
    }
</style>